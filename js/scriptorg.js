/*

	Class Name: SortBox
	===================
	"SortBox" class is used to :
					=> accept the image,
					=> edit as per the parameters,
					=> breaks the images in parts,
					=> shuffles them,
					=> and rearrage them according to the given Sortings Alogrithms.

	------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------
	|		Note:                                                                            |
	|		=====                                                                            |
	|			This class is used for all sorting algorithms and stored it in array.        |
	|			The algorithms are generated using for loop and stored it in array indexes.  |
	------------------------------------------------------------------------------------------
	------------------------------------------------------------------------------------------


	Generates each sorting categories in an HTML <div> id (i.e. sort0, sort1, sort2, sort3, sort4, sort5).
	                                                   ==           =      =      =      =      =      =

	Each id (sortx) contains the puzzle pieces HTML <canvas> named id (i.e. canvas_x_y).
	             =                                                 ==              = =

	========================================================================
	||                                                                    ||
	||                                                                    ||
	|| (Where x is the image number, and y is jigsaw square piece number) ||
	||        =                          =                                ||
	||                                                                    ||
	||                                                                    ||
	========================================================================

	Sorting Types
	=============
		Six Types of sorting will be used followed by value of x indicates the type of sorting.
															   =
			0 -> Bubble Sort
			1 -> Selection Sort
			2 -> Insertion Sort
			3 -> Merge Sort
			4 -> Shell Sort
			5 -> Quick Sort

	Below is an Example to get you the total understanding of the implementation.

	i.e. Sorting number x = 0: Bubble Sort
	======================================
	Therefore,
		the following HTML <canvas> would be generated inside id="sort0"(will already exist in HTML document) :
			<div id="sort0">
				<canvas id="canvas_0_0"></canvas>
				<canvas id="canvas_0_1"></canvas>
				<canvas id="canvas_0_2"></canvas>
				<canvas id="canvas_0_3"></canvas>
				<canvas id="canvas_0_4"></canvas>
				<canvas id="canvas_0_5"></canvas>
				<canvas id="canvas_0_6"></canvas>
				.............
				.............
				.............
				<canvas id="canvas_0_99"></canvas>
			</div>

	Functions and its Description
	=============================
	1. shufflearr(array) -> Receives the each index of an array and shuffles it and return the output.
							This function will be used inside shuffle() function definition to shuffle the received jigsaw square pieces.

	2. ready(length, divs, duration) -> prepare the <canvas> size which would be used for arranging each jigsaw square piece and also
										push them in an canvas[] array.

									 -> Parameters
										==========
										* length => length of each jigsaw square (i.e. 27 x 27).
										* divs => number of squares(division) in each row and column to form the image.
										* duration => duration is required in order to check the time taken and according to this,
													  the buttons will be enabled and disabled.

	3. readyImage(img) -> after calculating using above functions, now its time to prepare the image using the values generated by the
						  above functions (shufflearr() and ready()).

	4. constructor(name) -> generating the css for <canvas> and naming of <div>'s id (i.e. sort0, sort1, sort2, sort3, sort4, sort5).

	5. updateImage() -> to update the Image.
*/
class SortBox {

    static lengthx = 0;
    static lengthy = 0;
    static divsx = 0;
    static divsy = 0;
    static blocklenx = 0;
    static blockleny = 0;
    static duration = 0;
    static canvas = [];
    static type;

    static shufflearr(array) {
        let currentIndex = array.length, temporaryValue, randomIndex;
        while (0 !== currentIndex) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1;

            temporaryValue = array[currentIndex];
            array[currentIndex] = array[randomIndex];
            array[randomIndex] = temporaryValue;
        }

        return array;
    }

    static ready(lengthx, lengthy, divsx, divsy, duration, type) {
        lengthx = Math.floor(lengthx / divsx) * divsx;
        lengthy = Math.floor(lengthy / divsy) * divsy;
        let blocklenx = lengthx / divsx;
        let blockleny = lengthy / divsy;

        this.lengthx = lengthx;
        this.lengthy = lengthy;
        this.divsx = divsx
        this.divsy = divsy
        this.blocklenx = blocklenx;
        this.blockleny = blockleny;
        this.duration = duration;
        this.type = type;

        for (let i = 0; i < divsx * divsy; ++i) {
            let can = document.createElement('canvas');
            can.height = blockleny;
            can.width = blocklenx;

            this.canvas.push(can);
        }
    }

    static readyImage(img) {
        let divsx = this.divsx;
        let divsy = this.divsy;
        let blocklenx = this.blocklenx;
        let blockleny = this.blockleny;

        let imlengthx = img.width;
        let imlengthy = img.height;
        imlengthx = Math.floor(imlengthx / divsx) * divsx;
        imlengthy = Math.floor(imlengthy / divsy) * divsy;
        let imblocklenx = imlengthx / divsx;
        let imblockleny = imlengthy / divsy;

        for (let i = 0; i < divsy; ++i) {
            for (let j = 0; j < divsx; ++j) {
                let can = this.canvas[divsy * i + j]
                can.getContext("2d").drawImage(img, j * imblocklenx, i * imblockleny, imblocklenx, imblockleny, 0, 0, blocklenx, blockleny);
            }
        }
    }

    constructor(name) {
        this.name = name;
        this.imidarray = [];
        this.idarray = [];
        this.animcounter = 0;

        let lengthx = SortBox.lengthx;
        let lengthy = SortBox.lengthy;
        let divsx = SortBox.divsx;
        let divsy = SortBox.divsy;
        let blocklenx = SortBox.blocklenx;
        let blockleny = SortBox.blockleny;
        let type = SortBox.type;

        var container;

        if (type == 1) {
            container = $("#sort" + name);
        } else if (type == 2) {
            container = $("#specific-sort" + name);
        }

        container.css({"height": lengthy + "px", "width": lengthx + "px"});

        for (let i = 0; i < divsy; ++i) {
            for (let j = 0; j < divsx; ++j) {
                let can = $(document.createElement('canvas'));

                can.attr({
                    "id": "canvas_" + name + "_" + (divsx * i + j),
                    "height": blockleny,
                    "width": blocklenx
                });

                can.css({
                    "top": (i * blockleny) + "px",
                    "left": (j * blocklenx) + "px"
                });

                container.append(can);
            }
        }
    }

    updateImage() {
        let divsx = SortBox.divsx;
        let divsy = SortBox.divsy;
        let name = this.name;

        for (let i = 0; i < divsx * divsy; ++i) {
            let can = $("#canvas_" + name + "_" + i).get(0).getContext("2d");
            can.drawImage(SortBox.canvas[i], 0, 0);
        }
    }

    placeImage(id, imid) {
        let divsx = SortBox.divsx;
        let divsy = SortBox.divsy;
        let blocklenx = SortBox.blocklenx;
        let blockleny = SortBox.blockleny;
        let name = this.name;

        let i = Math.floor(imid / divsx);
        let j = imid % divsx;

        let ob = $("#canvas_" + name + "_" + id);

        ob.css({
            "top": (i * blockleny) + "px",
            "left": (j * blocklenx) + "px"
        });
    }

    swapimid(imid1, imid2) {
        let idarray = this.idarray;
        let imidarray = this.imidarray;

        let id1 = idarray[imid1];
        let id2 = idarray[imid2];

        this.placeImage(id1, imid2);
        this.placeImage(id2, imid1);

        idarray[imid1] = id2;
        idarray[imid2] = id1;

        imidarray[id1] = imid2;
        imidarray[id2] = imid1;
    }

    resetImage() {
        let divsx = SortBox.divsx;
        let divsy = SortBox.divsy;

        for (let i = 0; i < divsx * divsy; ++i) {
            this.idarray[i] = i;
            this.imidarray[i] = i;
            this.placeImage(i, i);
        }
    }

    shuffleImage() {
        let divsx = SortBox.divsx;
        let divsy = SortBox.divsy;

        this.imidarray = [];
        this.idarray = [];

        for (let i = 0; i < divsx * divsy; ++i) {
            this.imidarray.push(i);
        }

        SortBox.shufflearr(this.imidarray);

        for (let i = 0; i < divsx * divsy; ++i) {
            this.idarray[this.imidarray[i]] = i;
            this.placeImage(i, this.imidarray[i]);
        }
    }

    applyAlgo(sort, sortTime) {
        let swaparr = sort(Array.from(this.idarray));
        let duration = SortBox.duration;
        let timeoutdur;

        for (let curswap = 0; curswap < swaparr.length; ++curswap) {
            timeoutdur = (sortTime * duration * curswap) / swaparr.length;

            this.animcounter = 0;
            let obj = this;

            setTimeout(function () {
                if (swaparr[obj.animcounter] != 0 && swaparr[obj.animcounter][0] != swaparr[obj.animcounter][1]) {
                    obj.swapimid(swaparr[obj.animcounter][0], swaparr[obj.animcounter][1]);
                }
                obj.animcounter++;
            }, timeoutdur);
        }

        setTimeout(function () {
            AppHandler.animationFinished();
        }, timeoutdur + 500);
    }

    applyAlgoForAllSort(sort, sortTime, sortType) {
        let swaparr = sort(Array.from(this.idarray));
        let duration = SortBox.duration;
        let timeoutdur;

        for (let curswap = 0; curswap < swaparr.length; ++curswap) {
            timeoutdur = (sortTime * duration * curswap) / swaparr.length;

            this.animcounter = 0;
            let obj = this;

            setTimeout(function () {
                if (swaparr[obj.animcounter] != 0 && swaparr[obj.animcounter][0] != swaparr[obj.animcounter][1]) {
                    obj.swapimid(swaparr[obj.animcounter][0], swaparr[obj.animcounter][1]);
                }
                obj.animcounter++;
            }, timeoutdur);
        }

        setTimeout(function () {
            AppHandler.animationFinishedForAllSort(sortType);
        }, timeoutdur + 500);
    }

    applySpecificAlgo(sort, sortTime) {
        let swaparr = sort(Array.from(this.idarray))
        let duration = SortBox.duration;
        let timeoutdur;

        for (let curswap = 0; curswap < swaparr.length; ++curswap) {
            timeoutdur = (sortTime * duration * curswap) / swaparr.length;

            this.animcounter = 0;

            let obj = this;

            setTimeout(function () {
                if (swaparr[obj.animcounter] != 0 && swaparr[obj.animcounter][0] != swaparr[obj.animcounter][1])
                    obj.swapimid(swaparr[obj.animcounter][0], swaparr[obj.animcounter][1]);
                obj.animcounter++;
            }, timeoutdur);
        }

        setTimeout(function () {
            AppHandler.animationFinishedSpecific();
        }, timeoutdur + 500);
    }
}

// Algorithms Class 1. Bubble, 2. Selection, 3. Insertion, 4. Merge, 5. Shell, 6. Quick
class algorithms {

    // Bubble Sorting
    static bubble(arr) {
        let swaparr = [];

        // Clearing the Table for new entries
        $('#generateLocations0').empty();

        for (let i = 0; i < arr.length; ++i) {

            // Printing i
            $('#generateLocations0').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

            for (let j = 1; j < arr.length - i; ++j) {
                swaparr.push(0);

                if (arr[j - 1] > arr[j]) {
                    let tmp = arr[j];
                    arr[j] = arr[j - 1];
                    arr[j - 1] = tmp;
                    swaparr.push([j - 1, j]);
                }

                //Printing j
                $('#generateLocations0').append('<tr><td style="color: cyan;"></td><td style="color: #ffffff;">' + j + '</td></tr>');

            }
        }

        /* ---- Printing the Table
        //clearing the table for new entries
        $('#generateLocations0').empty().append('<tr class="table-tr"><th class="table-th">PASS</th><th class="table-th">Locations</th> <th class="table-th">Swapping Locations</th></tr>');

        for(let i=0; i < arr.length; ++i)
        {
            $('#generateLocations0').append('<tr class="table-tr"><td class="table-td" style="color: cyan;">'+pass_values[i]+'</td><td class="table-td"></td><td class="table-td"></td></tr>');
            for(let j=1; j < arr.length-i; ++j)
            {
                $('#generateLocations0').append('<tr class="table-tr"><td class="table-td"></td><td class="table-td" style="color: #ffffff;">'+location_values[j]+'</td><td class="table-td" style="color: #7bed9f;">'+swap_values[j]+'</td></tr>');
            }
        }
        */

        return swaparr;
    }

    // Selection Sorting
    static selection(arr) {
        let swaparr = [];
        let smallest = 0;

        // Clearing the Table for new entries
        $('#generateLocations1').empty();

        for (let i = 0; i < arr.length - 1; ++i) {

            $('#generateLocations1').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

            smallest = i;

            for (let j = i + 1; j < arr.length; ++j) {
                swaparr.push(0);

                $('#generateLocations1').append('<tr><td></td><td>' + j + '</td></tr>');

                if (arr[j] < arr[smallest]) {
                    smallest = j;
                }
            }

            if (smallest != i) {
                let tmp = arr[smallest];
                arr[smallest] = arr[i];
                arr[i] = tmp;
                swaparr.push([smallest, i]);
            }
        }

        return swaparr;
    }

    // Insertion Sorting
    static insertion(arr) {
        let swaparr = [];

        // Clearing the Table for new entries
        $('#generateLocations2').empty();

        for (let i = 1; i < arr.length; ++i) {

            $('#generateLocations2').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

            let j = i - 1;

            while (j >= 0 && arr[j] > arr[j + 1]) {
                swaparr.push(0);

                $('#generateLocations2').append('<tr><td></td><td style="color: #ffffff;">' + j + '</td></tr>');

                let tmp = arr[j + 1];
                arr[j + 1] = arr[j];
                arr[j] = tmp;
                swaparr.push([j, j + 1]);
                j--;
            }
        }

        return swaparr;
    }

    // Merge Sorting
    static merge(arr) {
        let swaparr = [];

        // Clearing the Table for new entries
        $('#generateLocations3').empty();

        let x = function (mergearr, start, end) {
            if (start >= end) return;

            let pivot = Math.floor((start + end) / 2);

            x(mergearr, start, pivot);
            x(mergearr, pivot + 1, end);

            for (let i = start + 1; i < end + 1; ++i) {

                $('#generateLocations3').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

                let j = i - 1;
                while (j >= start && mergearr[j] > mergearr[j + 1]) {
                    swaparr.push(0);

                    $('#generateLocations3').append('<tr><td></td><td style="color: #ffffff;">' + j + '</td></tr>');

                    let tmp = mergearr[j + 1];
                    mergearr[j + 1] = mergearr[j];
                    mergearr[j] = tmp;
                    swaparr.push([j, j + 1]);
                    j--;
                }
            }
        }

        x(arr, 0, arr.length - 1);
        return swaparr;
    }

    // Shell Sorting
    static shell(arr) {
        let swaparr = [];

        // Clearing the Table for new entries
        $('#generateLocations4').empty();

        let part = 1;
        while (part < arr.length) part = 3 * part + 1;
        part = (part - 1) / 3;

        while (part > 0) {
            for (let i = part; i < arr.length; i += part) {

                $('#generateLocations4').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

                let j = i - part;
                while (j >= 0 && arr[j] > arr[j + part]) {
                    swaparr.push(0);

                    $('#generateLocations4').append('<tr><td></td><td style="color: #ffffff;">' + j + '</td></tr>');

                    let tmp = arr[j + part];
                    arr[j + part] = arr[j];
                    arr[j] = tmp;
                    swaparr.push([j, j + part]);
                    j -= part;
                }
            }

            part = (part - 1) / 3;
        }

        return swaparr;
    }

    // Quick Sorting
    static quick(arr) {
        let swaparr = [];

        // Clearing the Table for new entries
        $('#generateLocations5').empty();

        let x = function (quickarr, low, high) {
            if (low >= high) return;

            let pivot = quickarr[high];
            let i = low;

            // Clearing the Table for new entries
            $('#generateLocations5').append('<tr><td style="color: cyan;">' + i + '</td><td></td></tr>');

            for (let j = low; j < high; ++j) {
                swaparr.push(0);

                // Clearing the Table for new entries
                $('#generateLocations5').append('<tr><td></td><td style="color: #ffffff;">' + j + '</td></tr>');

                if (quickarr[j] < pivot) {
                    let tmp = quickarr[j];
                    quickarr[j] = quickarr[i];
                    quickarr[i] = tmp;
                    swaparr.push([i, j]);
                    i++;
                }
            }

            let tmp = quickarr[high];
            quickarr[high] = quickarr[i];
            quickarr[i] = tmp;
            swaparr.push([i, high]);

            x(quickarr, low, i - 1);
            x(quickarr, i + 1, high);
        }

        x(arr, 0, arr.length - 1);

        return swaparr;
    }
}

// Dividing the image in blocks, preparing for shuffle, reset, sort and Controlling the Applications actions.
class AppHandler {
    static numviews = 6; // Number of Image Columns/Sorting Types; i.e. 1. Bubble Sort, 2. Selection Sort, ..., 6. Quick Sort.
    static duration = 6; // The time duration of 6 images required to sort stored in array.
    static lengthx = 240; // Image Crop Size.
    static lengthy = 240; // Image Crop Size.
    static divsx = 3; // Number of jigsaw square pieces in each row and each column.
    static divsy = 3; // Number of jigsaw square pieces in each row and each column.
    static type; // Type of sorting. 1 - means all and 2. means single.
    static views = [];		//storing the images in an array.
    static specific_views = "";
    static all_sort_button_pressed_array = []; //It will used to disable the pressed button in 'frontend-all-sortings' class

    static img;

    static sortTime = 1000;

    static sortType;
    static specificSortType;

    static setTime(sortTime) {
        this.sortTime = sortTime;
    }

    static setTiles(sortTilesx, sortTilesy) {
        this.divsx = sortTilesx;
        this.divsy = sortTilesy;
    }

    static ready(typeofSort) {
        this.type = typeofSort;

        // Loading, Creating and Initializing the SortBox class.
        SortBox.ready(this.lengthx, this.lengthy, this.divsx, this.divsy, this.duration, this.type); // this.type defines specific sort or all the sortings at once.

        for (let i = 0; i < this.numviews; ++i) {
            this.views.push(new SortBox(i.toString()));
        }

    }

    static readySpecific(sortType, typeofSort) {
        this.type = typeofSort;
        this.specificSortType = sortType;

        // Loading, Creating and Initializing the SortBox class.
        SortBox.ready(this.lengthx, this.lengthy, this.divsx, this.divsy, this.duration, this.type); // this.type defines specific sort or all the sortings at once.

        this.specific_views = new SortBox(this.specificSortType.toString());

    }

    static clearAllSorts() {
        $('#sort0').empty();
        $('#sort1').empty();
        $('#sort2').empty();
        $('#sort3').empty();
        $('#sort4').empty();
        $('#sort5').empty();

        $('#specific-sort0').empty();
        $('#specific-sort1').empty();
        $('#specific-sort2').empty();
        $('#specific-sort3').empty();
        $('#specific-sort4').empty();
        $('#specific-sort5').empty();
    }

    static create() {
        let img = ImageHandler.getImage();

        this.img = img;

        SortBox.readyImage(img);

        for (let i = 0; i < this.numviews; ++i) {
            this.views[i].updateImage();
        }
    }

    static createSpecific() {
        let img = ImageHandler.getImage();

        this.img = img;

        SortBox.readyImage(img);

        this.specific_views.updateImage();

    }

    static resetImage() {
        for (let i = 0; i < this.numviews; ++i) {
            this.views[i].resetImage();
        }
    }

    static resetImageSpecific() {
        this.specific_views.resetImage();
    }

    static shuffleImage() {
        for (let i = 0; i < this.numviews; ++i) {
            this.views[i].shuffleImage();
        }

        // Cleaning the Array Completely from memory as well as explicitly
        //this.sort_button_pressed_array.splice(0, this.sort_button_pressed_array.length);
    }

    static shuffleImageSpecific() {
        this.specific_views.shuffleImage();
    }


    static sortAll(sortType) {
        this.sortType = sortType;

        if (sortType == 0) {
            this.views[0].applyAlgo(algorithms.bubble, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else if (sortType == 1) {
            this.views[1].applyAlgo(algorithms.selection, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else if (sortType == 2) {
            this.views[2].applyAlgo(algorithms.insertion, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else if (sortType == 3) {
            this.views[3].applyAlgo(algorithms.merge, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else if (sortType == 4) {
            this.views[4].applyAlgo(algorithms.shell, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else if (sortType == 5) {
            this.views[5].applyAlgo(algorithms.quick, this.sortTime);
            this.all_sort_button_pressed_array.push(sortType);
        } else {
            this.views[0].applyAlgoForAllSort(algorithms.bubble, this.sortTime, 0);
            this.views[1].applyAlgoForAllSort(algorithms.selection, this.sortTime, 1);
            this.views[2].applyAlgoForAllSort(algorithms.insertion, this.sortTime, 2);
            this.views[3].applyAlgoForAllSort(algorithms.merge, this.sortTime, 3);
            this.views[4].applyAlgoForAllSort(algorithms.shell, this.sortTime, 4);
            this.views[5].applyAlgoForAllSort(algorithms.quick, this.sortTime, 5);

            /* Cleaning the Array Completely from memory as well as explicitly
            because there is no need to count as we will disable all the buttons at once */
            this.all_sort_button_pressed_array = [];
        }


        //this.sort_button_pressed_array.splice(0, this.sort_button_pressed_array.length);
    }

    static multipleSorts(multiTypeSorts) {
        let arrLength = multiTypeSorts.length;

        let i = 0;

        for (i = 0; i < arrLength; i++) {
            if (multiTypeSorts[i] == 0) {
                this.views[0].applyAlgo(algorithms.bubble, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            } else if (multiTypeSorts[i] == 1) {
                this.views[1].applyAlgo(algorithms.selection, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            } else if (multiTypeSorts[i] == 2) {
                this.views[2].applyAlgo(algorithms.insertion, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            } else if (multiTypeSorts[i] == 3) {
                this.views[3].applyAlgo(algorithms.merge, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            } else if (multiTypeSorts[i] == 4) {
                this.views[4].applyAlgo(algorithms.shell, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            } else if (multiTypeSorts[i] == 5) {
                this.views[5].applyAlgo(algorithms.quick, this.sortTime);
                this.all_sort_button_pressed_array.push(multiTypeSorts[i]);
            }
        }

    }

    static sortSpecific(sortType) {
        this.specificSortType = sortType;

        if (this.specificSortType == 0) {
            this.specific_views.applySpecificAlgo(algorithms.bubble, this.sortTime);
        } else if (this.specificSortType == 1) {
            this.specific_views.applySpecificAlgo(algorithms.selection, this.sortTime);
        } else if (this.specificSortType == 2) {
            this.specific_views.applySpecificAlgo(algorithms.insertion, this.sortTime);
        } else if (this.specificSortType == 3) {
            this.specific_views.applySpecificAlgo(algorithms.merge, this.sortTime);
        } else if (this.specificSortType == 4) {
            this.specific_views.applySpecificAlgo(algorithms.shell, this.sortTime);
        } else if (this.specificSortType == 5) {
            this.specific_views.applySpecificAlgo(algorithms.quick, this.sortTime);
        }
    }

    static animationFinished() {

        let arrayLength = this.all_sort_button_pressed_array.length;

        let i = 0;

        frontendAllSortingScreen.enableClass('all-sorting-sort-buttons');

        $('.all-sorting-sort-checkboxes').prop("checked", false);
        $('.all-sorting-sort-checkboxes').removeAttr("disabled");

        if (arrayLength == 0 || arrayLength == "") {
            frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
        } else {
            for (i = 0; i < arrayLength; i++) {
                if (this.all_sort_button_pressed_array[i] == 0) {
                    frontendAllSortingScreen.disableID('all-sorting-bubble-sort');

                    $('#checkbox-bubble-sort').prop("checked", true);
                    $('#checkbox-bubble-sort').attr("disabled", "disabled");

                    $('#sort0').empty();
                    $('#sort0').html('<img id="animated-gif0" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else if (this.all_sort_button_pressed_array[i] == 1) {
                    frontendAllSortingScreen.disableID('all-sorting-selection-sort');

                    $('#checkbox-selection-sort').prop("checked", true);
                    $('#checkbox-selection-sort').attr("disabled", "disabled");

                    $('#sort1').empty();
                    $('#sort1').html('<img id="animated-gif1" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else if (this.all_sort_button_pressed_array[i] == 2) {
                    frontendAllSortingScreen.disableID('all-sorting-insertion-sort');

                    $('#checkbox-insertion-sort').prop("checked", true);
                    $('#checkbox-insertion-sort').attr("disabled", "disabled");

                    $('#sort2').empty();
                    $('#sort2').html('<img id="animated-gif2" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else if (this.all_sort_button_pressed_array[i] == 3) {
                    frontendAllSortingScreen.disableID('all-sorting-merge-sort');

                    $('#checkbox-merge-sort').prop("checked", true);
                    $('#checkbox-merge-sort').attr("disabled", "disabled");

                    $('#sort3').empty();
                    $('#sort3').html('<img id="animated-gif3" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else if (this.all_sort_button_pressed_array[i] == 4) {
                    frontendAllSortingScreen.disableID('all-sorting-shell-sort');

                    $('#checkbox-shell-sort').prop("checked", true);
                    $('#checkbox-shell-sort').attr("disabled", "disabled");

                    $('#sort4').empty();
                    $('#sort4').html('<img id="animated-gif4" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else if (this.all_sort_button_pressed_array[i] == 5) {
                    frontendAllSortingScreen.disableID('all-sorting-quick-sort');

                    $('#checkbox-quick-sort').prop("checked", true);
                    $('#checkbox-quick-sort').attr("disabled", "disabled");

                    $('#sort5').empty();
                    $('#sort5').html('<img id="animated-gif5" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
                } else {
                    /* Disabling all the sort Buttons if 'All Sort' is pressed */
                    // Finally, Disabling all the Sorting Buttons.
                    this.all_sort_button_pressed_array = [];
                    frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');

                    $('.all-sorting-sort-checkboxes').prop("checked", true);
                    $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
                }
            }
        }

        // Enabling the Buttons.
        frontendAllSortingScreen.enableID('all-sorting-button-back'); // Back Button
        frontendAllSortingScreen.enableID('all-sorting-reset'); // Reset Button
        frontendAllSortingScreen.enableID('all-sorting-shuffle'); // Shuffle Button
        frontendAllSortingScreen.enableID('all-sorting-set-time'); // Set Time Button
        frontendAllSortingScreen.enableID('all-sorting-set-tiles'); // Set Tiles Button
        frontendAllSortingScreen.enableID('all-sorting-button-export'); // Disabling Export Button.
    }

    static animationFinishedForAllSort(sortType) {
        if (sortType == 0) {
            $('#sort0').empty();
            $('#sort0').html('<img id="animated-gif0" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (sortType == 1) {
            $('#sort1').empty();
            $('#sort1').html('<img id="animated-gif1" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (sortType == 2) {
            $('#sort2').empty();
            $('#sort2').html('<img id="animated-gif2" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (sortType == 3) {
            $('#sort3').empty();
            $('#sort3').html('<img id="animated-gif3" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (sortType == 4) {
            $('#sort4').empty();
            $('#sort4').html('<img id="animated-gif4" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (sortType == 5) {
            $('#sort5').empty();
            $('#sort5').html('<img id="animated-gif5" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        }

        // Enabling the Buttons.
        frontendAllSortingScreen.enableID('all-sorting-button-back'); // Back Button
        frontendAllSortingScreen.enableID('all-sorting-reset'); // Reset Button
        frontendAllSortingScreen.enableID('all-sorting-shuffle'); // Shuffle Button
        frontendAllSortingScreen.enableID('all-sorting-set-time'); // Set Time Button
        frontendAllSortingScreen.enableID('all-sorting-set-tiles'); // Set Tiles Button
        frontendAllSortingScreen.enableID('all-sorting-button-export'); // Disabling Export Button.
    }

    static animationFinishedSpecific() {

        if (this.specificSortType == 0) {
            frontendBubbleSortScreen.enableID('bubble-sort-button-back');
            frontendBubbleSortScreen.enableID('bubble-sort-button-reset');
            frontendBubbleSortScreen.disableID('bubble-sort-button-shuffle');
            frontendBubbleSortScreen.disableID('bubble-sort-button-sort');
            frontendBubbleSortScreen.enableID('bubble-sort-button-export');
            frontendBubbleSortScreen.enableID('bubble-sort-button-set-time');
            frontendBubbleSortScreen.enableID('bubble-sort-button-set-tiles');

            $('#specific-sort0').empty();
            $('#specific-sort0').html('<img id="animated-gif0" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (this.specificSortType == 1) {
            frontendSelectionSortScreen.enableID('selection-sort-button-back');
            frontendSelectionSortScreen.enableID('selection-sort-button-reset');
            frontendSelectionSortScreen.disableID('selection-sort-button-shuffle');
            frontendSelectionSortScreen.disableID('selection-sort-button-sort');
            frontendSelectionSortScreen.enableID('selection-sort-button-export');
            frontendSelectionSortScreen.enableID('selection-sort-button-set-time');
            frontendSelectionSortScreen.enableID('selection-sort-button-set-tiles');

            $('#specific-sort1').empty();
            $('#specific-sort1').html('<img id="animated-gif1" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (this.specificSortType == 2) {
            frontendInsertionSortScreen.enableID('insertion-sort-button-back');
            frontendInsertionSortScreen.enableID('insertion-sort-button-reset');
            frontendInsertionSortScreen.disableID('insertion-sort-button-shuffle');
            frontendInsertionSortScreen.disableID('insertion-sort-button-sort');
            frontendInsertionSortScreen.enableID('insertion-sort-button-export');
            frontendInsertionSortScreen.enableID('insertion-sort-button-set-time');
            frontendInsertionSortScreen.enableID('insertion-sort-button-set-tiles');

            $('#specific-sort2').empty();
            $('#specific-sort2').html('<img id="animated-gif2" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');

        } else if (this.specificSortType == 3) {
            frontendMergeSortScreen.enableID('merge-sort-button-back');
            frontendMergeSortScreen.enableID('merge-sort-button-reset');
            frontendMergeSortScreen.disableID('merge-sort-button-shuffle');
            frontendMergeSortScreen.disableID('merge-sort-button-sort');
            frontendMergeSortScreen.enableID('merge-sort-button-export');
            frontendMergeSortScreen.enableID('merge-sort-button-set-time');
            frontendMergeSortScreen.enableID('merge-sort-button-set-tiles');

            $('#specific-sort3').empty();
            $('#specific-sort3').html('<img id="animated-gif3" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (this.specificSortType == 4) {
            frontendShellSortScreen.enableID('shell-sort-button-back');
            frontendShellSortScreen.enableID('shell-sort-button-reset');
            frontendShellSortScreen.disableID('shell-sort-button-shuffle');
            frontendShellSortScreen.disableID('shell-sort-button-sort');
            frontendShellSortScreen.enableID('shell-sort-button-export');
            frontendShellSortScreen.enableID('shell-sort-button-set-time');
            frontendShellSortScreen.enableID('shell-sort-button-set-tiles');

            $('#specific-sort4').empty();
            $('#specific-sort4').html('<img id="animated-gif4" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        } else if (this.specificSortType == 5) {
            frontendQuickSortScreen.enableID('quick-sort-button-back');
            frontendQuickSortScreen.enableID('quick-sort-button-reset');
            frontendQuickSortScreen.disableID('quick-sort-button-shuffle');
            frontendQuickSortScreen.disableID('quick-sort-button-sort');
            frontendQuickSortScreen.enableID('quick-sort-button-export');
            frontendQuickSortScreen.enableID('quick-sort-button-set-time');
            frontendQuickSortScreen.enableID('quick-sort-button-set-tiles');

            $('#specific-sort5').empty();
            $('#specific-sort5').html('<img id="animated-gif5" src="' + this.img.src + '" style="width: 240px; height: 240px; object-fit: cover;" />');
        }
    }
}


// Frontend Control to control Hide or Show a View and Enabling or Disabling a Button.
class FrontendViewControl {
    static show() {
        $("#" + this.id).removeAttr('hidden');
    }

    static hide() {
        $("#" + this.id).attr('hidden', 'hidden');
    }

    static enableID(id) {
        $("#" + id).removeClass("disabled");
    }

    static disableID(id) {
        $("#" + id).addClass("disabled");
    }

    static enableClass(Class) {
        $("." + Class).removeClass("disabled");
    }

    static disableClass(Class) {
        $("." + Class).addClass("disabled");
    }
}

// Frontend Home Screen, inherits FrontendViewControl.

class frontendHomeScreen extends FrontendViewControl {
    static id = "frontend-home-screen";

    static ready() {
        $("#app-button-upload-image-url").click(function () {

            let url = $("#image-url").val();

            if (url == "")
                alert("Empty URL!");
            else {
                frontendHomeScreen.hide();
                frontendLoadingScreen.show();

                ImageHandler.img_src(url);
                FormHandler.set_type("url", url);
            }
        });

        $("#app-button-upload-image").change(function () {

            frontendLoadingScreen.show();
            frontendHomeScreen.hide();

            if (this.files && this.files[0]) {
                ImageHandler.img_src(URL.createObjectURL(this.files[0]));
                FormHandler.set_type("file", this.files[0]);
            }
        });

        $("#app-button-sample-image").click(function () {

            frontendLoadingScreen.show();
            frontendHomeScreen.hide();

            let imagesArray = [
                "https://www.lightstalking.com/wp-content/uploads/cityscape_1557459555-1024x684.jpeg",
                "https://miro.medium.com/max/3000/1*MI686k5sDQrISBM6L8pf5A.jpeg",
                "https://media.sciencephoto.com/image/c0384612/800wm",
                "https://img.freepik.com/free-vector/space-tour-illustration_153233-85.jpg?size=338&ext=jpg",
                "https://pm1.narvii.com/5680/f9368a49f7ffb386fbe012dfd90b5dff73fa1273_hq.jpg"
            ];

            let url = imagesArray[Math.floor(Math.random() * imagesArray.length)];

            ImageHandler.img_src(url);

            FormHandler.set_type("url", url);
        });
    }
}

// Frontend for Loading Screen and handle the views and actions.
class frontendLoadingScreen extends FrontendViewControl {
    static id = "frontend-loading-screen";
}

// Frontend Sort Selection Screen.
class frontendSortSelectionScreen extends FrontendViewControl {
    static id = "frontend-sort-selection-screen";
    static loadReadyStatusAll = 0;

    static ready() {
        if (this.loadReadyStatusAll == 0) {
            /*$('#app-button-selection-screen-home').click(function(){
                window.location.reload();
            });
            */

            $('.app-button-home').click(function () {
                window.location.reload();
            });

            $('#app-button-all-sorting-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendAllSortingScreen.show();
                frontendAllSortingScreen.ready();

                $('#sortTimeAll').val('1000');
                $('#sortTilesAll option[value="3"]').prop("selected", true);

                AppHandler.clearAllSorts();
                AppHandler.ready(1);
                AppHandler.create();

                // Enabling the required buttons and settings on first screen start.
                frontendAllSortingScreen.enableID('all-sorting-button-back');
                frontendAllSortingScreen.enableID('all-sorting-shuffle');
                frontendAllSortingScreen.disableID('all-sorting-reset');
                frontendAllSortingScreen.enableID('all-sorting-set-time');
                frontendAllSortingScreen.enableID('all-sorting-set-tiles');
                frontendAllSortingScreen.enableID('all-sorting-button-export');

                frontendAllSortingScreen.disableClass("all-sorting-sort-buttons");

                $('.all-sorting-sort-checkboxes').prop("checked", false);
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");

            });

            $('#app-button-bubble-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendBubbleSortScreen.show();
                frontendBubbleSortScreen.ready();


                // Clearing the Table for new entries
                $('#generateLocations0').empty();

                $('#bubble-sort-set-time').val('1000');
                $('#bubble-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(0, 2);
                AppHandler.createSpecific();

                frontendBubbleSortScreen.disableID('bubble-sort-button-reset');
                frontendBubbleSortScreen.enableID('bubble-sort-button-shuffle');
                frontendBubbleSortScreen.disableID('bubble-sort-button-sort');
                frontendBubbleSortScreen.enableID('bubble-sort-button-export');
                frontendBubbleSortScreen.enableID('bubble-sort-button-set-time');
                frontendBubbleSortScreen.enableID('bubble-sort-button-set-tiles');

            });

            $('#app-button-selection-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendSelectionSortScreen.show();
                frontendSelectionSortScreen.ready();

                // Clearing the Table for new entries
                $('#generateLocations1').empty();

                $('#selection-sort-set-time').val('1000');
                $('#selection-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(1, 2); // 1-> Selection Sorting, 2-> Type of Sorting, Group or Specific.
                AppHandler.createSpecific();

                frontendBubbleSortScreen.disableID('selection-sort-button-reset');
                frontendBubbleSortScreen.enableID('selection-sort-button-shuffle');
                frontendBubbleSortScreen.disableID('selection-sort-button-sort');
                frontendBubbleSortScreen.enableID('selection-sort-button-export');
                frontendBubbleSortScreen.enableID('selection-sort-button-set-time');
                frontendBubbleSortScreen.enableID('selection-sort-button-set-tiles');

            });

            $('#app-button-insertion-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendInsertionSortScreen.show();
                frontendInsertionSortScreen.ready();

                // Clearing the Table for new entries
                $('#generateLocations2').empty();

                $('#insertion-sort-set-time').val('1000');
                $('#insertion-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(2, 2);
                AppHandler.createSpecific();

                frontendInsertionSortScreen.disableID('insertion-sort-button-reset');
                frontendInsertionSortScreen.enableID('insertion-sort-button-shuffle');
                frontendInsertionSortScreen.disableID('insertion-sort-button-sort');
                frontendInsertionSortScreen.enableID('insertion-sort-button-export');
                frontendInsertionSortScreen.enableID('insertion-sort-button-set-time');
                frontendInsertionSortScreen.enableID('insertion-sort-button-set-tiles');

            });

            $('#app-button-merge-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendMergeSortScreen.show();
                frontendMergeSortScreen.ready();

                // Clearing the Table for new entries
                $('#generateLocations3').empty();

                $('#merge-sort-set-time').val('1000');
                $('#merge-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(3, 2);
                AppHandler.createSpecific();

                frontendMergeSortScreen.disableID('merge-sort-button-reset');
                frontendMergeSortScreen.enableID('merge-sort-button-shuffle');
                frontendMergeSortScreen.disableID('merge-sort-button-sort');
                frontendMergeSortScreen.enableID('merge-sort-button-export');
                frontendMergeSortScreen.enableID('merge-sort-button-set-time');
                frontendMergeSortScreen.enableID('merge-sort-button-set-tiles');

            });

            $('#app-button-shell-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendShellSortScreen.show();
                frontendShellSortScreen.ready();

                // Clearing the Table for new entries
                $('#generateLocations4').empty();

                $('#shell-sort-set-time').val('1000');
                $('#shell-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(4, 2);
                AppHandler.createSpecific();

                frontendShellSortScreen.disableID('shell-sort-button-reset');
                frontendShellSortScreen.enableID('shell-sort-button-shuffle');
                frontendShellSortScreen.disableID('shell-sort-button-sort');
                frontendShellSortScreen.enableID('shell-sort-button-export');
                frontendShellSortScreen.enableID('shell-sort-button-set-time');
                frontendShellSortScreen.enableID('shell-sort-button-set-tiles');

            });

            $('#app-button-quick-sort-view').click(function () {

                frontendSortSelectionScreen.hide();

                frontendQuickSortScreen.show();
                frontendQuickSortScreen.ready();

                // Clearing the Table for new entries
                $('#generateLocations5').empty();

                $('#quick-sort-set-time').val('1000');
                $('#quick-sort-set-tiles option[value="3"]').prop("selected", true);
                AppHandler.setTime(1000);
                AppHandler.setTiles(3);

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(5, 2);
                AppHandler.createSpecific();

                frontendQuickSortScreen.disableID('quick-sort-button-reset');
                frontendQuickSortScreen.enableID('quick-sort-button-shuffle');
                frontendQuickSortScreen.disableID('quick-sort-button-sort');
                frontendQuickSortScreen.enableID('quick-sort-button-export');
                frontendQuickSortScreen.enableID('quick-sort-button-set-time');
                frontendQuickSortScreen.enableID('quick-sort-button-set-tiles');

            });
        }
    }
}

// All Sorting Screen
class frontendAllSortingScreen extends FrontendViewControl {
    static id = "frontend-all-sorting-screen";
    static sortTime = 1000;
    static sortTiles = 3;
    static loadReadyStatus = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus == 0) {

            $('#all-sorting-button-back').click(function () {

                frontendAllSortingScreen.hide();
                frontendSortSelectionScreen.show();

                $('#all-sorting-single-sort-buttons').hide();
                $('#all-sorting-multiple-sort-buttons').hide();

            });

            $('#all-sorting-set-time').click(function () {
                let sortTime = $('#sortTimeAll').val();

                this.sortTime = sortTime;

                if (this.sortTime >= 200 && this.sortTime <= 4000) {
                    AppHandler.setTime(this.sortTime);
                    AppHandler.clearAllSorts();
                    AppHandler.ready(1);
                    AppHandler.create();
                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }


                frontendAllSortingScreen.disableID("all-sorting-reset");
                frontendAllSortingScreen.enableID("all-sorting-shuffle");
                frontendAllSortingScreen.disableClass("all-sorting-sort-buttons");

                $('.all-sorting-sort-checkboxes').prop("checked", false);
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-set-tiles').click(function () {

                let sortTiles = $('#sortTilesAll').val();

                this.sortTiles = sortTiles;

                AppHandler.setTiles(this.sortTiles);
                AppHandler.clearAllSorts();
                AppHandler.ready(1);
                AppHandler.create();

                frontendAllSortingScreen.disableID("all-sorting-reset");
                frontendAllSortingScreen.enableID("all-sorting-shuffle");
                frontendAllSortingScreen.disableClass("all-sorting-sort-buttons");

                $('.all-sorting-sort-checkboxes').prop("checked", false);
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");

                alert("Tiles set Successfully!");
            });

            $('#all-sorting-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.ready(1);
                AppHandler.create();
                AppHandler.resetImage();

                frontendAllSortingScreen.disableID("all-sorting-reset");
                frontendAllSortingScreen.disableClass("all-sorting-sort-buttons");

                $('.all-sorting-sort-checkboxes').prop("checked", false);
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-shuffle').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.ready(1);
                AppHandler.create();

                AppHandler.shuffleImage();

                frontendAllSortingScreen.enableID("all-sorting-reset");
                frontendAllSortingScreen.enableClass("all-sorting-sort-buttons");


                $('.all-sorting-sort-checkboxes').prop("checked", false);
                $('.all-sorting-sort-checkboxes').removeAttr("disabled");
            });

            $('#all-sorting-sort-options').click(function () {

                // When multiple opens, the single will close.

                $('#all-sorting-single-sort-buttons').slideToggle(300);
                $('#all-sorting-multiple-sort-buttons').hide(300);
            });

            $('#all-sorting-multi-sort-options').click(function () {

                // When single opens, the multiple will close.

                $('#all-sorting-multiple-sort-buttons').slideToggle(300);
                $('#all-sorting-single-sort-buttons').hide(300);

            });

            $('#all-sorting-sort-all').click(function () {

                AppHandler.sortAll(); // No Parameters means all will be sorted.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');

                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");

            });

            $('#all-sorting-multiple-sort').click(function () {

                let sortingMethods = [];

                $('input[name="sorting_methods"]:checked').each(function () {
                    sortingMethods.push(this.value);
                });

                AppHandler.multipleSorts(sortingMethods);
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");

            });

            $('#all-sorting-bubble-sort').click(function () {

                AppHandler.sortAll(0); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-selection-sort').click(function () {

                AppHandler.sortAll(1); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-insertion-sort').click(function () {

                AppHandler.sortAll(2); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-merge-sort').click(function () {

                AppHandler.sortAll(3); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-shell-sort').click(function () {

                AppHandler.sortAll(4); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $('#all-sorting-quick-sort').click(function () {

                AppHandler.sortAll(5); // Parameter 0 means Bubble Sorting.

                // Disabling the Buttons.
                frontendAllSortingScreen.disableID('all-sorting-button-back'); // Back Button.
                frontendAllSortingScreen.disableID('all-sorting-reset'); // Reset Button.
                frontendAllSortingScreen.disableID('all-sorting-shuffle'); // Shuffle Button.
                frontendAllSortingScreen.disableID('all-sorting-sort-all'); // Sort All Button.
                frontendAllSortingScreen.disableID('all-sorting-set-time'); // Set Time Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Set Tiles Button.
                frontendAllSortingScreen.disableID('all-sorting-button-export'); // Disabling Export Button.
                frontendAllSortingScreen.disableID('all-sorting-set-tiles'); // Disable Sort All Buttons.

                // Finally, Disabling all the Sorting Buttons.
                frontendAllSortingScreen.disableClass('all-sorting-sort-buttons');
                $('.all-sorting-sort-checkboxes').attr("disabled", "disabled");
            });

            $("#all-sorting-button-export").click(function () {
                frontendExport.show();
                frontendAllSortingScreen.hide();
                var algorithms = "";
                $('input[name="sorting_methods"]:checked').each(function () {
                    algorithms += this.value + ",";
                });
                if (algorithms.length !== 0) {
                    algorithms = algorithms.substr(0, algorithms.length - 1);
                }
                console.log("Algos: " + algorithms);

                FormHandler.set_selected_algorithms(algorithms)
                $.ajax({
                    type: "POST",
                    url: "export_all.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus = 1;
        }
    }
}

// Bubble Sorting Screen
class frontendBubbleSortScreen extends FrontendViewControl {
    static id = "frontend-bubble-sort-screen";
    static sortTime0 = 1000;
    static sortTiles0 = 3;
    static loadReadyStatus0 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus0 == 0) {
            $('#bubble-sort-button-back').click(function () {

                frontendBubbleSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#bubble-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(0, 2);
                AppHandler.createSpecific();
                AppHandler.resetImageSpecific();

                frontendBubbleSortScreen.disableID('bubble-sort-button-reset');
                frontendBubbleSortScreen.enableID('bubble-sort-button-shuffle');
                frontendBubbleSortScreen.disableID('bubble-sort-button-sort');

            });

            $('#bubble-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendBubbleSortScreen.enableID('bubble-sort-button-sort');
                frontendBubbleSortScreen.enableID('bubble-sort-button-reset');

            });

            $('#bubble-sort-button-sort').click(function () {

                AppHandler.sortSpecific(0);

                frontendBubbleSortScreen.disableClass('bubble-sort-buttons');
            });

            $('#bubble-sort-button-set-time').click(function () {

                let sortTime0 = $('#bubble-sort-set-time').val();
                this.sortTime0 = sortTime0;

                if (this.sortTime0 >= 200 && this.sortTime0 <= 4000) {
                    AppHandler.setTime(this.sortTime0);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(0, 2);
                    AppHandler.createSpecific();

                    frontendBubbleSortScreen.disableID('bubble-sort-button-reset');
                    frontendBubbleSortScreen.enableID('bubble-sort-button-shuffle');
                    frontendBubbleSortScreen.disableID('bubble-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#bubble-sort-button-set-tiles').click(function () {

                let sortTiles0 = $('#bubble-sort-set-tiles').val();
                this.sortTiles0 = sortTiles0;

                AppHandler.setTiles(this.sortTiles0);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(0, 2);
                AppHandler.createSpecific();

                frontendBubbleSortScreen.disableID('bubble-sort-button-reset');
                frontendBubbleSortScreen.enableID('bubble-sort-button-shuffle');
                frontendBubbleSortScreen.disableID('bubble-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#bubble-sort-button-export").click(function () {
                frontendExport.show();
                frontendBubbleSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_0.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus0 = 1;
        }
    }
}

// Selection Sorting Screen
class frontendSelectionSortScreen extends FrontendViewControl {
    static id = "frontend-selection-sort-screen";
    static sortTime1 = 1000;
    static sortTiles1 = 3;
    static loadReadyStatus1 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus1 == 0) {
            $('#selection-sort-button-back').click(function () {

                frontendSelectionSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#selection-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(1, 2);
                AppHandler.createSpecific();
                AppHandler.resetImageSpecific();

                frontendSelectionSortScreen.disableID('selection-sort-button-reset');
                frontendSelectionSortScreen.enableID('selection-sort-button-shuffle');
                frontendSelectionSortScreen.disableID('selection-sort-button-sort');

            });

            $('#selection-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendSelectionSortScreen.enableID('selection-sort-button-sort');
                frontendSelectionSortScreen.enableID('selection-sort-button-reset');

            });

            $('#selection-sort-button-sort').click(function () {

                AppHandler.sortSpecific(1);

                frontendSelectionSortScreen.disableClass('selection-sort-buttons');
            });

            $('#selection-sort-button-set-time').click(function () {

                let sortTime1 = $('#selection-sort-set-time').val();
                this.sortTime1 = sortTime1;

                if (this.sortTime1 >= 200 && this.sortTime1 <= 4000) {
                    AppHandler.setTime(this.sortTime1);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(1, 2);
                    AppHandler.createSpecific();

                    frontendSelectionSortScreen.disableID('selection-sort-button-reset');
                    frontendSelectionSortScreen.enableID('selection-sort-button-shuffle');
                    frontendSelectionSortScreen.disableID('selection-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#selection-sort-button-set-tiles').click(function () {

                let sortTiles1 = $('#selection-sort-set-tiles').val();
                this.sortTiles1 = sortTiles1;

                AppHandler.setTiles(this.sortTiles1);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(1, 2);
                AppHandler.createSpecific();

                frontendSelectionSortScreen.disableID('selection-sort-button-reset');
                frontendSelectionSortScreen.enableID('selection-sort-button-shuffle');
                frontendSelectionSortScreen.disableID('selection-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#selection-sort-button-export").click(function () {
                frontendExport.show();
                frontendSelectionSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_1.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus1 = 1;
        }
    }
}


// Insertion Sorting Screen
class frontendInsertionSortScreen extends FrontendViewControl {
    static id = "frontend-insertion-sort-screen";
    static sortTime2 = 1000;
    static sortTiles2 = 3;
    static loadReadyStatus2 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus2 == 0) {
            $('#insertion-sort-button-back').click(function () {

                frontendInsertionSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#insertion-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(2, 2);
                AppHandler.createSpecific();
                AppHandler.resetImageSpecific();

                frontendInsertionSortScreen.disableID('insertion-sort-button-reset');
                frontendInsertionSortScreen.enableID('insertion-sort-button-shuffle');
                frontendInsertionSortScreen.disableID('insertion-sort-button-sort');

            });

            $('#insertion-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendInsertionSortScreen.enableID('insertion-sort-button-sort');
                frontendInsertionSortScreen.enableID('insertion-sort-button-reset');

            });

            $('#insertion-sort-button-sort').click(function () {

                AppHandler.sortSpecific(2);

                frontendInsertionSortScreen.disableClass('insertion-sort-buttons');
            });

            $('#insertion-sort-button-set-time').click(function () {

                let sortTime2 = $('#insertion-sort-set-time').val();
                this.sortTime2 = sortTime2;

                if (this.sortTime2 >= 200 && this.sortTime2 <= 4000) {
                    AppHandler.setTime(this.sortTime2);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(2, 2);
                    AppHandler.createSpecific();

                    frontendInsertionSortScreen.disableID('insertion-sort-button-reset');
                    frontendInsertionSortScreen.enableID('insertion-sort-button-shuffle');
                    frontendInsertionSortScreen.disableID('insertion-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#insertion-sort-button-set-tiles').click(function () {

                let sortTiles2 = $('#insertion-sort-set-tiles').val();
                this.sortTiles2 = sortTiles2;

                AppHandler.setTiles(this.sortTiles2);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(2, 2);
                AppHandler.createSpecific();

                frontendInsertionSortScreen.disableID('insertion-sort-button-reset');
                frontendInsertionSortScreen.enableID('insertion-sort-button-shuffle');
                frontendInsertionSortScreen.disableID('insertion-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#insertion-sort-button-export").click(function () {
                frontendExport.show();
                frontendInsertionSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_2.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus2 = 1;
        }
    }
}

// Merge Sorting Screen
class frontendMergeSortScreen extends FrontendViewControl {
    static id = "frontend-merge-sort-screen";
    static sortTime3 = 1000;
    static sortTiles3 = 3;
    static loadReadyStatus3 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus3 == 0) {
            $('#merge-sort-button-back').click(function () {

                frontendMergeSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#merge-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(3, 2);
                AppHandler.createSpecific();
                AppHandler.resetImageSpecific();

                frontendMergeSortScreen.disableID('merge-sort-button-reset');
                frontendMergeSortScreen.enableID('merge-sort-button-shuffle');
                frontendMergeSortScreen.disableID('merge-sort-button-sort');

            });

            $('#merge-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendMergeSortScreen.enableID('merge-sort-button-sort');
                frontendMergeSortScreen.enableID('merge-sort-button-reset');

            });

            $('#merge-sort-button-sort').click(function () {

                AppHandler.sortSpecific(3);

                frontendMergeSortScreen.disableClass('merge-sort-buttons');
            });

            $('#merge-sort-button-set-time').click(function () {

                let sortTime3 = $('#merge-sort-set-time').val();
                this.sortTime3 = sortTime3;

                if (this.sortTime3 >= 200 && this.sortTime3 <= 4000) {
                    AppHandler.setTime(this.sortTime3);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(3, 2);
                    AppHandler.createSpecific();

                    frontendMergeSortScreen.disableID('merge-sort-button-reset');
                    frontendMergeSortScreen.enableID('merge-sort-button-shuffle');
                    frontendMergeSortScreen.disableID('merge-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#merge-sort-button-set-tiles').click(function () {

                let sortTiles3 = $('#merge-sort-set-tiles').val();
                this.sortTiles3 = sortTiles3;

                AppHandler.setTiles(this.sortTiles3);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(3, 2);
                AppHandler.createSpecific();

                frontendMergeSortScreen.disableID('merge-sort-button-reset');
                frontendMergeSortScreen.enableID('merge-sort-button-shuffle');
                frontendMergeSortScreen.disableID('merge-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#merge-sort-button-export").click(function () {
                frontendExport.show();
                frontendMergeSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_3.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus3 = 1;
        }
    }
}

// Shell Sorting Screen
class frontendShellSortScreen extends FrontendViewControl {
    static id = "frontend-shell-sort-screen";
    static sortTime4 = 1000;
    static sortTiles4 = 3;
    static loadReadyStatus4 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus4 == 0) {
            $('#shell-sort-button-back').click(function () {

                frontendShellSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#shell-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(4, 2);
                AppHandler.createSpecific();
                AppHandler.resetImageSpecific();

                frontendShellSortScreen.disableID('shell-sort-button-reset');
                frontendShellSortScreen.enableID('shell-sort-button-shuffle');
                frontendShellSortScreen.disableID('shell-sort-button-sort');

            });

            $('#shell-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendShellSortScreen.enableID('shell-sort-button-sort');
                frontendShellSortScreen.enableID('shell-sort-button-reset');

            });

            $('#shell-sort-button-sort').click(function () {

                AppHandler.sortSpecific(4);

                frontendShellSortScreen.disableClass('shell-sort-buttons');
            });

            $('#shell-sort-button-set-time').click(function () {

                let sortTime4 = $('#shell-sort-set-time').val();
                this.sortTime4 = sortTime4;

                if (this.sortTime4 >= 200 && this.sortTime4 <= 4000) {
                    AppHandler.setTime(this.sortTime4);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(4, 2);
                    AppHandler.createSpecific();

                    frontendShellSortScreen.disableID('shell-sort-button-reset');
                    frontendShellSortScreen.enableID('shell-sort-button-shuffle');
                    frontendShellSortScreen.disableID('shell-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#shell-sort-button-set-tiles').click(function () {

                let sortTiles4 = $('#shell-sort-set-tiles').val();
                this.sortTiles4 = sortTiles4;

                AppHandler.setTiles(this.sortTiles4);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(4, 2);
                AppHandler.createSpecific();

                frontendShellSortScreen.disableID('shell-sort-button-reset');
                frontendShellSortScreen.enableID('shell-sort-button-shuffle');
                frontendShellSortScreen.disableID('shell-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#shell-sort-button-export").click(function () {
                frontendExport.show();
                frontendShellSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_4.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus4 = 1;
        }
    }
}

// Quick Sorting Screen
class frontendQuickSortScreen extends FrontendViewControl {
    static id = "frontend-quick-sort-screen";
    static sortTime5 = 1000;
    static sortTiles5 = 3;
    static loadReadyStatus5 = 0; // To prevent again loading of already alive existing methods.

    static ready() {
        if (this.loadReadyStatus5 == 0) {
            $('#quick-sort-button-back').click(function () {

                frontendQuickSortScreen.hide();
                frontendSortSelectionScreen.show();
            });

            $('#quick-sort-button-reset').click(function () {

                AppHandler.clearAllSorts();
                AppHandler.readySpecific(5, 2);
                AppHandler.createSpecific();

                frontendQuickSortScreen.disableID('quick-sort-button-reset');
                frontendQuickSortScreen.enableID('quick-sort-button-shuffle');
                frontendQuickSortScreen.disableID('quick-sort-button-sort');

            });

            $('#quick-sort-button-shuffle').click(function () {

                AppHandler.shuffleImageSpecific();

                frontendQuickSortScreen.enableID('quick-sort-button-sort');
                frontendQuickSortScreen.enableID('quick-sort-button-reset');

            });

            $('#quick-sort-button-sort').click(function () {

                AppHandler.sortSpecific(5);

                frontendQuickSortScreen.disableClass('quick-sort-buttons');
            });

            $('#quick-sort-button-set-time').click(function () {

                let sortTime5 = $('#quick-sort-set-time').val();
                this.sortTime5 = sortTime5;

                if (this.sortTime5 >= 200 && this.sortTime5 <= 4000) {
                    AppHandler.setTime(this.sortTime5);
                    AppHandler.clearAllSorts();
                    AppHandler.readySpecific(5, 2);
                    AppHandler.createSpecific();

                    frontendQuickSortScreen.disableID('quick-sort-button-reset');
                    frontendQuickSortScreen.enableID('quick-sort-button-shuffle');
                    frontendQuickSortScreen.disableID('quick-sort-button-sort');

                    alert("Duration Set Successfully!");
                } else {
                    alert("Enter Values between 200 and 4000!");
                }

            });

            $('#quick-sort-button-set-tiles').click(function () {

                let sortTiles5 = $('#quick-sort-set-tiles').val();
                this.sortTiles5 = sortTiles5;

                AppHandler.setTiles(this.sortTiles5);
                AppHandler.clearAllSorts();
                AppHandler.readySpecific(5, 2);
                AppHandler.createSpecific();

                frontendQuickSortScreen.disableID('quick-sort-button-reset');
                frontendQuickSortScreen.enableID('quick-sort-button-shuffle');
                frontendQuickSortScreen.disableID('quick-sort-button-sort');

                alert("Tiles Set Successfully!");
            });


            $("#quick-sort-button-export").click(function () {
                frontendExport.show();
                frontendQuickSortScreen.hide();

                $.ajax({
                    type: "POST",
                    url: "export_5.php",
                    processData: false,
                    contentType: false,
                    cache: false,
                    data: FormHandler.data(),
                    success: function (data) {
                        frontendExport.token = data.trim();
                        frontendExport.next_state();
                    },
                    error: function () {
                        alert("hmm");
                    }
                });

                frontendExport.ajax_interval = setInterval(function () {
                    $.ajax({
                        type: "POST",
                        url: "status.php",
                        cache: false,
                        data: {"token": frontendExport.token},
                        success: function (data) {
                            if (parseInt(data.trim()) > frontendExport.state)
                                frontendExport.next_state();
                        },
                        error: function () {
                            alert("hmm");
                        }
                    });
                }, 1000);
            });

            this.loadReadyStatus5 = 1;
        }
    }
}

// Image Handling
class ImageHandler {
    static img = new Image();

    static getImage() {
        return this.img;
    }

    static img_onload(func) {
        this.img.onload = func;
    }

    static img_src(src) {
        this.img.src = src;
    }
}

// Form Handling
class FormHandler {
    // "type" : [url, file]

    static formdata = new FormData();

    static set_type(type, data) {
        this.formdata.append("type", type);

        if (type == "url") {
            this.formdata.append("url", data);
        } else if (type == "file") {
            this.formdata.append("file", data, "image");
        }
    }

    //algorithms comma separated indexes (0,5,4)
    static set_selected_algorithms(algorithms, data) {
        this.formdata.append("algorithms", algorithms);
    }

    static data() {
        return this.formdata;
    }
}

// Export Feature
class frontendExport extends FrontendViewControl {
    static id = "frontend-export";
    static token = "";
    static state = -1;
    static ajax_interval = null;

    static ready() {
        $("#export-download-button").click(function () {
            window.location = "download.php?token=" + frontendExport.token;
        });
    }

    static next_state() {
        this.state++;
        if (this.state == 0) {
            $("#export-upload-done").css("visibility", "visible");
            $("#export-frames").css("visibility", "visible");
        } else if (this.state == 1) {
            $("#export-frames-done").css("visibility", "visible");
            $("#export-render").css("visibility", "visible");
        } else if (this.state == 2) {
            $("#export-render-done").css("visibility", "visible");
            $("#export-compress").css("visibility", "visible");
        } else if (this.state == 3) {
            $("#export-compress-done").css("visibility", "visible");
            $("#export-download").css("visibility", "visible");
            clearInterval(this.ajax_interval);
        }
    }
}


// Everything Starts from here.
$(document).ready(function () {

    frontendExport.ready(); // Loading the Export Feature.
    frontendHomeScreen.ready(); // Loading the First View or Home Screen functions.


    // If sample Image is used or Image received from URL, then this function will start working.
    ImageHandler.img_onload(function () {

        frontendLoadingScreen.hide(); // Hiding the View if loaded successfully.
        frontendSortSelectionScreen.show(); // Frontend Displaying Sorting Selection Screen.
        frontendSortSelectionScreen.ready(); // Frontend Enabling buttons functions.
    });
});

